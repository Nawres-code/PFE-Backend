stages:
  - test # test and scan
  - build_deploy

backend_build:
  stage: build_deploy
  image: maven:ibmjava
  variables:
    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"

  cache:
    paths:
    - .m2/repository
  tags:
    - trylocal
  script:

    - mvn clean package
    
    - tar czf target.tar.gz target/
    # upload this stage to JFROG
    - curl -v -u "$JFROG_USER:$JFROG_PASS" -T "target.tar.gz" "$JFROG_URL/repository/$JFROG_REPO_back/target.tar.gz"  
  rules:
    - if: '$CI_COMMIT_BRANCH == "devBACK"'




backend_deploy:
  stage: build_deploy
  needs: ["backend_build"]
  tags:
    - trylocal_linux

  script:
    #EDIT Dockerfile if u need some changes
    #build image from dockerfile
    - docker build  --no-cache -t localhost:8082/repository/docker-local/dep:latest .
    # push docker image to nexus
    - docker login -u admin -p Rafik.123 localhost:8082
    - docker push localhost:8082/repository/docker-local/dep:latest
    # pull it 
    - docker pull localhost:8082/repository/docker-local/dep:latest
    #RUN IT 
    - docker run  -p 8080:8080 -d localhost:8082/repository/docker-local/dep:latest
    # SCAN DOCKER IMAGE
    #- trivy image  --timeout 20m  --format table -o imagereport.txt localhost:8082/repository/docker-local/dep:latest
    # upload scan report to nexus
    #- curl -v -u "$JFROG_USER:$JFROG_PASS" -T "imagereport.txt" "$JFROG_URL/repository/vuln_reports/imagereport.txt"


  environment:
    name: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "devBACK"'




sonarqube-check:
  stage: test

  tags:
    - trylocal
  image: 
    name: sonarsource/sonar-scanner-cli:5
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "devBACK"' 
  
